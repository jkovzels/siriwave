/** Declaration file generated by dts-gen */

export = Siriwave;

declare class Siriwave {
	/**
	* Build the SiriWave
	* @param {Object} opt
	* @param {DOMElement} [opt.container=document.body] The DOM container where the DOM canvas element will be added
	* @param {String} [opt.style='ios'] The style of the wave: `ios` or `ios9`
	* @param {Number} [opt.ratio=null] Ratio of the display to use. Calculated by default.
	* @param {Number} [opt.speed=0.2] The speed of the animation.
	* @param {Number} [opt.amplitude=1] The amplitude of the complete wave.
	* @param {Number} [opt.frequency=6] The frequency for the complete wave (how many waves). - Not available in iOS9 Style
	* @param {String} [opt.color='#fff'] The color of the wave, in hexadecimal form (`#336699`, `#FF0`). - Not available in iOS9 Style
	* @param {Boolean} [opt.cover=false] The `canvas` covers the entire width or height of the container.
	* @param {Number} [opt.width=null] Width of the canvas. Calculated by default.
	* @param {Number} [opt.height=null] Height of the canvas. Calculated by default.
	* @param {Boolean} [opt.autostart=false] Decide wether start the animation on boot.
	* @param {Number} [opt.pixelDepth=0.02] Number of step (in pixels) used when drawed on canvas.
	* @param {Number} [opt.lerpSpeed=0.1] Lerp speed to interpolate properties.
	*/
	constructor(...args: any[]);

	hex2rgb(hex: any): any;

	lerp(propertyStr: any): any;

	set(propertyStr: any, v: any): void;

	setAmplitude(v: any): void;

	setSpeed(v: number): void;

	start(): void;

	startDrawCycle(): void;

	stop(): void;
}

